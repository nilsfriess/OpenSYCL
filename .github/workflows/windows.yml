name: Windows build and test

on: [push, pull_request]

jobs:
  test:
    name: clang ${{ matrix.clang }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        clang: [17]
        os: [windows-2022]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Cache Boost
      id: cache-boost
      uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/boost/boost_1_81_0
        key: ${{runner.os}}-boost

    - name: Cache LLVM-17
      id: cache-llvm17
      uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/llvm
        key: ${{runner.os}}-llvm17

    - name: Download Ninja
      shell: powershell
      run: |
        cd $env:GITHUB_WORKSPACE
        mkdir ninj_install
        Invoke-WebRequest -o ninja.zip "https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip"
        Expand-Archive -Path ninja.zip -DestinationPath "$env:GITHUB_WORKSPACE/ninja_install"
        echo "$env:GITHUB_WORKSPACE/ninja_install" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
    - name: Download prebuilt LLVM 17
      if: steps.cache-llvm17.outputs.cache-hit != 'true' && matrix.clang == 17
      shell: powershell
      run: |
        cd $env:GITHUB_WORKSPACE
        Invoke-WebRequest -o llvm.7z "https://www.dropbox.com/scl/fi/otgm61nk0j7wfzxvlptvz/llvm-17-windows-prebuilt.7z?rlkey=u3npkfe1rcef6vd7nway9t92p&dl=1"
        7z.exe x llvm.7z
        mv .\llvm-17-windows-prebuilt\ llvm
        
    - name: Build boost from source
      if: steps.cache-boost.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        $env:PATH += ";$env:GITHUB_WORKSPACE/llvm/bin"
        md -Force $env:GITHUB_WORKSPACE/boost
        cd $env:GITHUB_WORKSPACE/boost
        Invoke-WebRequest https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.7z -OutFile boost.7z
        7z.exe x boost.7z
        ls $env:GITHUB_WORKSPACE
        cd .\boost_1_81_0
        .\bootstrap.bat
        .\b2.exe --with-context --with-fiber --with-test toolset=clang-win address-model=64 variant=release embed-manifest-via=linker --build-type=complete stage
        
    - name: Build AdaptiveCpp (without CUDA backend)
      if: matrix.clang == 17
      shell: powershell
      run: |
        $env:PATH = "$env:GITHUB_WORKSPACE/llvm/bin;$env:PATH"
        mkdir $env:GITHUB_WORKSPACE/build/core
        cd $env:GITHUB_WORKSPACE/build/core
        cmake "$env:GITHUB_WORKSPACE" -G Ninja -DCMAKE_C_COMPILER="clang.exe" -DCMAKE_CXX_COMPILER="clang++.exe" -DCMAKE_INSTALL_PREFIX=".\install" -DBoost_ROOT="$env:GITHUB_WORKSPACE/boost/boost_1_81_0" -DWITH_CUDA_BACKEND=OFF -DLLVM_DIR="$env:GITHUB_WORKSPACE/llvm/lib/cmake/llvm" -DCMAKE_BUILD_TYPE=Release
        ninja -j2 install

    - name: build CPU tests
      shell: powershell
      run: |
        $env:PATH = "$env:GITHUB_WORKSPACE/llvm/bin;$env:PATH"
        mkdir $env:GITHUB_WORKSPACE/build/tests-cpu
        cd $env:GITHUB_WORKSPACE/build/tests-cpu
        cmake -G Ninja -DACPP_TARGETS="omp" -DAdaptiveCpp_DIR="$env:GITHUB_WORKSPACE/build/core/install/lib/cmake/AdaptiveCpp" -DBoost_ROOT="$env:GITHUB_WORKSPACE/boost/boost_1_81_0" -DCMAKE_BUILD_TYPE=Release "$env:GITHUB_WORKSPACE/tests"
        ninja -j2

    - name: run CPU tests
      shell: cmd
      run: |
        set PATH=%GITHUB_WORKSPACE%\build\core\install\bin;%PATH%
        set GITHUB_WORKSPACE=%GITHUB_WORKSPACE:\=/%
        cd "%GITHUB_WORKSPACE%/build/tests-cpu"
        sycl_tests.exe
        
